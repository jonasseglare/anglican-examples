;; gorilla-repl.fileformat = 1

;; **
;;; # Inferring CRP Parameters
;; **

;; @@
(ns crp-params
  (:require [gorilla-plot.core :as plot]
            [clojure.core.matrix :as m])
  (:use clojure.repl
        clojure.pprint
        [anglican core runtime emit stat]))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; A **Chinese resturant process** (CRP) is a stochastic process that describes a particular data-generating process. Mathematically, this data-generating process is one in which at each step, a new integer is sampled from a set of possible integers, with probability proportional to how often that particular integer has been sampled so far, and with a certain probability of sampling a new integer that hasn't been seen so far. That's a little  hard to visualize at first. So intuitively, we explain this process with (naturally) the metaphor of customers entering a Chinese restuarant.
;;; 
;;; This Chinese restaurant has an infinite amount of tables, and no customers at 12:00. At 12:01, one customer walks in, and takes a seat at table 1. At this point, the state of the CRP is simply (1): there is one customer seated at one table. At 12:02, another customer enters the restaurant, buys food, and looks to take a seat. However, this customer has to choose between sitting at table 1, with the previous customer, or choosing a new, empty table - table 2. This process continues without end. At each point, the probability that a customer chooses a new table is a function of the parameter `alpha` of the CRP, and of the number of people sitting at each table. Customers are drawn to tables with more customers seated at them.
;;; 
;;; The practical use of this Chinese Restaurant Process is as part of a model for infinite-parameter classification tasks. Imagine you're faced with a series of N individuals that you want to classify into groups based on some attributes. If you are told the number of groups that exist, then we can solve this problem straightforwardly: basically, find the individuals that are most like one another, and infer the average characteristics of each group. However, if you don't know the number of groups in advance, then this problem is not straightforward - because there is no obvious upper bound on the number of groups of the true population, we might have to propose an unboundedly high number of groups in order to solve this problem.
;;; 
;;; This is the problem that CRPs are intended to solve. Intuitively, we assign each individual to a "table" - representing their classification. As we are faced with new individuals, we have some probability of assigning them to existing classifications, depending on how common those classifications have been, and we have some probability to assign them to a completely new classification.
;;; 
;;; 
;; **

;; **
;;; In this worksheet, our focus is on inferring the hyperparameter of the CRP: the number `alpha`. We interpret `alpha` as a pseudocount, roughly as the likelihood of assigning a new individual to a new group as opposed to an existing group. Crucially, some values of `alpha` are better at modelling some datasets than others. For instance, if we are faced with the dataset (1 1 1 1 1 1 1), in which every individual belongs to the same group, a high value of `alpha` would be inappropriate, because the probability of each individual going to a new group (a new table) appears to be low. In contrast, if we are faced with the dataset (0 1 2 3 4 5 6 7 8 9), a high value of alpha would be very appropriate.
;;; 
;;; In the Bayesian setting, we naturally place a prior over values of `alpha`, compute the posterior over values of `alpha` given the true data, and then use this posterior to return our predictions for the classification of the next individual. That problem is the focus of this worksheet.
;; **

;; @@
(defprotocol random-process2
  (evidence [this]
            "returns the log model evidence of the current state of the process"))


(defn crp-evidence [counts alpha]
  (let [N (reduce + (vals counts)) ;; this is the total # of customers, of samples seen
        C (count counts)] ;; this is the # of tables used so far
    (+
      (* C (Math/log alpha))
      (reduce + (map log-gamma-fn (vals counts))) ;; log-gamma-fn is factorial shifted by 1
      (log-gamma-fn alpha)
      (- (log-gamma-fn (+ alpha N))))))

(defproc CRP-new
  [alpha] [counts {}]
  (produce [this] (categorical-crp counts alpha))
  (absorb [this sample]
          (CRP-new alpha (update-in counts [sample] (fnil inc 0))))

  random-process2
  (evidence [this]
            (crp-evidence counts alpha)))
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-symbol'>random-process2</span>","value":"random-process2"},{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/crp-evidence</span>","value":"#'crp-params/crp-evidence"}],"value":"[random-process2,#'crp-params/crp-evidence]"},{"type":"html","content":"<span class='clj-unkown'>#multifn[print-method 0x3dbf8575]</span>","value":"#multifn[print-method 0x3dbf8575]"}],"value":"[[random-process2,#'crp-params/crp-evidence],#multifn[print-method 0x3dbf8575]]"}
;; <=

;; @@
;; train CRPs on some samples and return the predictions:
(defquery predict [samples alpha]
  (declare :primitive CRP-new evidence)
  (let [crp (loop [n 0
                   crp (CRP-new alpha)]
              (if (= n (count samples))
                 crp
                 (recur (+ n 1)
                        (absorb crp (nth samples n)))))]
    {:sample (sample (produce crp)), :evidence (evidence crp)}))

;; here are the samples we'll use:
(def samples '(0 1 1 1 1 2 2 3 3 3 3 1 1 2 2 3 3 3 3 4 4 5 5 6 6 6 6 6 6 7 7 8))
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/predict</span>","value":"#'crp-params/predict"},{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/samples</span>","value":"#'crp-params/samples"}],"value":"[#'crp-params/predict,#'crp-params/samples]"}
;; <=

;; **
;;; It's not immediately apparent what value of `alpha` would best summarize the data above. Customers do not overwhelmingly sit at the same table, but there is a marked preference for already-settled tables. To get some idea what impact the parameter `alpha` has, we compare the CRP model's predictions for different values of `alpha`:
;; **

;; @@
(def S 10000)

(def results-1 (map :sample (map :result (take S (doquery :importance predict [samples 0.1])))))
(def results-2 (map :sample (map :result (take S (doquery :importance predict [samples 5])))))
(def results-3 (map :sample (map :result (take S (doquery :importance predict [samples 50])))))

(plot/compose
  (plot/histogram results-1 :normalize :probability :bins 10 :plot-range [[0 10] [0 1]] :color "blue")
  (plot/histogram results-2 :normalize :probability :bins 10 :plot-range [[0 10] [0 1]] :color "green")
  (plot/histogram results-3 :normalize :probability :bins 10 :plot-range [[0 10] [0 1]] :color "red"))
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/S</span>","value":"#'crp-params/S"},{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/results-1</span>","value":"#'crp-params/results-1"}],"value":"[#'crp-params/S,#'crp-params/results-1]"},{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/results-2</span>","value":"#'crp-params/results-2"}],"value":"[[#'crp-params/S,#'crp-params/results-1],#'crp-params/results-2]"},{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/results-3</span>","value":"#'crp-params/results-3"}],"value":"[[[#'crp-params/S,#'crp-params/results-1],#'crp-params/results-2],#'crp-params/results-3]"},{"type":"vega","content":{"width":400,"height":247.2187957763672,"padding":{"top":10,"left":55,"bottom":40,"right":10},"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":[0,10]},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":[0,1]}],"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}],"data":[{"name":"b7b634c7-58c6-47c6-8c45-d66ff0cc2b4c","values":[{"x":0,"y":0},{"x":1.0000000000000002,"y":0.2268},{"x":2.0000000000000004,"y":0.1248},{"x":3.000000000000001,"y":0.247},{"x":4.000000000000001,"y":0.0619},{"x":5.000000000000001,"y":0.0644},{"x":6.000000000000001,"y":0.1805},{"x":7.000000000000001,"y":0.0626},{"x":8.000000000000002,"y":0.029},{"x":9.000000000000002,"y":0.003},{"x":10.000000000000002,"y":0},{"x":11.000000000000002,"y":0}]},{"name":"e0a165e4-3f7c-4d6b-a605-e982a0abd3b6","values":[{"x":0,"y":0},{"x":1.0000000000000002,"y":0.1842},{"x":2.0000000000000004,"y":0.1087},{"x":3.000000000000001,"y":0.215},{"x":4.000000000000001,"y":0.0534},{"x":5.000000000000001,"y":0.0537},{"x":6.000000000000001,"y":0.1647},{"x":7.000000000000001,"y":0.0574},{"x":8.000000000000002,"y":0.0276},{"x":9.000000000000002,"y":0.1353},{"x":10.000000000000002,"y":0},{"x":11.000000000000002,"y":0}]},{"name":"7ae10e28-bbc9-482a-b8e9-42b2f57ce71b","values":[{"x":0,"y":0},{"x":1.0000000000000002,"y":0.0876},{"x":2.0000000000000004,"y":0.0454},{"x":3.000000000000001,"y":0.1044},{"x":4.000000000000001,"y":0.0227},{"x":5.000000000000001,"y":0.0237},{"x":6.000000000000001,"y":0.0687},{"x":7.000000000000001,"y":0.0239},{"x":8.000000000000002,"y":0.013},{"x":9.000000000000002,"y":0.6106},{"x":10.000000000000002,"y":0},{"x":11.000000000000002,"y":0}]}],"marks":[{"type":"line","from":{"data":"b7b634c7-58c6-47c6-8c45-d66ff0cc2b4c"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"blue"},"fillOpacity":{"value":0.4},"stroke":{"value":"blue"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}},{"type":"line","from":{"data":"e0a165e4-3f7c-4d6b-a605-e982a0abd3b6"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"green"},"fillOpacity":{"value":0.4},"stroke":{"value":"green"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}},{"type":"line","from":{"data":"7ae10e28-bbc9-482a-b8e9-42b2f57ce71b"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"red"},"fillOpacity":{"value":0.4},"stroke":{"value":"red"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain [0 10]} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain [0 1]}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}], :data ({:name \"b7b634c7-58c6-47c6-8c45-d66ff0cc2b4c\", :values ({:x 0.0, :y 0} {:x 1.0000000000000002, :y 0.2268} {:x 2.0000000000000004, :y 0.1248} {:x 3.000000000000001, :y 0.247} {:x 4.000000000000001, :y 0.0619} {:x 5.000000000000001, :y 0.0644} {:x 6.000000000000001, :y 0.1805} {:x 7.000000000000001, :y 0.0626} {:x 8.000000000000002, :y 0.029} {:x 9.000000000000002, :y 0.003} {:x 10.000000000000002, :y 0.0} {:x 11.000000000000002, :y 0})} {:name \"e0a165e4-3f7c-4d6b-a605-e982a0abd3b6\", :values ({:x 0.0, :y 0} {:x 1.0000000000000002, :y 0.1842} {:x 2.0000000000000004, :y 0.1087} {:x 3.000000000000001, :y 0.215} {:x 4.000000000000001, :y 0.0534} {:x 5.000000000000001, :y 0.0537} {:x 6.000000000000001, :y 0.1647} {:x 7.000000000000001, :y 0.0574} {:x 8.000000000000002, :y 0.0276} {:x 9.000000000000002, :y 0.1353} {:x 10.000000000000002, :y 0.0} {:x 11.000000000000002, :y 0})} {:name \"7ae10e28-bbc9-482a-b8e9-42b2f57ce71b\", :values ({:x 0.0, :y 0} {:x 1.0000000000000002, :y 0.0876} {:x 2.0000000000000004, :y 0.0454} {:x 3.000000000000001, :y 0.1044} {:x 4.000000000000001, :y 0.0227} {:x 5.000000000000001, :y 0.0237} {:x 6.000000000000001, :y 0.0687} {:x 7.000000000000001, :y 0.0239} {:x 8.000000000000002, :y 0.013} {:x 9.000000000000002, :y 0.6106} {:x 10.000000000000002, :y 0.0} {:x 11.000000000000002, :y 0})}), :marks ({:type \"line\", :from {:data \"b7b634c7-58c6-47c6-8c45-d66ff0cc2b4c\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"blue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"blue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}} {:type \"line\", :from {:data \"e0a165e4-3f7c-4d6b-a605-e982a0abd3b6\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"green\"}, :fillOpacity {:value 0.4}, :stroke {:value \"green\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}} {:type \"line\", :from {:data \"7ae10e28-bbc9-482a-b8e9-42b2f57ce71b\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"red\"}, :fillOpacity {:value 0.4}, :stroke {:value \"red\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}})}}"}],"value":"[[[[#'crp-params/S,#'crp-params/results-1],#'crp-params/results-2],#'crp-params/results-3],#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain [0 10]} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain [0 1]}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}], :data ({:name \"b7b634c7-58c6-47c6-8c45-d66ff0cc2b4c\", :values ({:x 0.0, :y 0} {:x 1.0000000000000002, :y 0.2268} {:x 2.0000000000000004, :y 0.1248} {:x 3.000000000000001, :y 0.247} {:x 4.000000000000001, :y 0.0619} {:x 5.000000000000001, :y 0.0644} {:x 6.000000000000001, :y 0.1805} {:x 7.000000000000001, :y 0.0626} {:x 8.000000000000002, :y 0.029} {:x 9.000000000000002, :y 0.003} {:x 10.000000000000002, :y 0.0} {:x 11.000000000000002, :y 0})} {:name \"e0a165e4-3f7c-4d6b-a605-e982a0abd3b6\", :values ({:x 0.0, :y 0} {:x 1.0000000000000002, :y 0.1842} {:x 2.0000000000000004, :y 0.1087} {:x 3.000000000000001, :y 0.215} {:x 4.000000000000001, :y 0.0534} {:x 5.000000000000001, :y 0.0537} {:x 6.000000000000001, :y 0.1647} {:x 7.000000000000001, :y 0.0574} {:x 8.000000000000002, :y 0.0276} {:x 9.000000000000002, :y 0.1353} {:x 10.000000000000002, :y 0.0} {:x 11.000000000000002, :y 0})} {:name \"7ae10e28-bbc9-482a-b8e9-42b2f57ce71b\", :values ({:x 0.0, :y 0} {:x 1.0000000000000002, :y 0.0876} {:x 2.0000000000000004, :y 0.0454} {:x 3.000000000000001, :y 0.1044} {:x 4.000000000000001, :y 0.0227} {:x 5.000000000000001, :y 0.0237} {:x 6.000000000000001, :y 0.0687} {:x 7.000000000000001, :y 0.0239} {:x 8.000000000000002, :y 0.013} {:x 9.000000000000002, :y 0.6106} {:x 10.000000000000002, :y 0.0} {:x 11.000000000000002, :y 0})}), :marks ({:type \"line\", :from {:data \"b7b634c7-58c6-47c6-8c45-d66ff0cc2b4c\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"blue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"blue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}} {:type \"line\", :from {:data \"e0a165e4-3f7c-4d6b-a605-e982a0abd3b6\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"green\"}, :fillOpacity {:value 0.4}, :stroke {:value \"green\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}} {:type \"line\", :from {:data \"7ae10e28-bbc9-482a-b8e9-42b2f57ce71b\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"red\"}, :fillOpacity {:value 0.4}, :stroke {:value \"red\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}})}}]"}
;; <=

;; **
;;; In the above graph, we see that the three models have marked differences. The blue model (`alpha = 0.1`) is the most "conservative", in a sense: for the new customer, it is extremely likely to predict that the customer will join an already-settled table. The red model (`alpha = 50`), by contrast, is much more "adventurous": it is overwhelmingly likely to predict that the customer will join a new table that has not been settled (table 9). The green model assigns moderate probability to each of these outcomes, with a clear but not overwhelming bias towards existing tables.
;;; 
;;; However, it is true that some of these CRPs are better at predicting our particular dataset than others. Below, we plot the log-evidence of the CRP model, for a range of hyperparameters `alpha`:
;; **

;; @@
(def alphas [0.01 0.05 0.1 0.5 1 5 10 50 100])

(defn find-evidence [alpha]
  (:evidence (:result (first (doquery :importance predict [samples alpha])))))

(def evidences (map find-evidence alphas))

(plot/list-plot (map (fn [a e] [(/ (Math/log a) (Math/log 10)) e])
                     alphas evidences))

;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/alphas</span>","value":"#'crp-params/alphas"},{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/find-evidence</span>","value":"#'crp-params/find-evidence"}],"value":"[#'crp-params/alphas,#'crp-params/find-evidence]"},{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/evidences</span>","value":"#'crp-params/evidences"}],"value":"[[#'crp-params/alphas,#'crp-params/find-evidence],#'crp-params/evidences]"},{"type":"vega","content":{"width":400,"height":247.2187957763672,"padding":{"top":10,"left":55,"bottom":40,"right":10},"data":[{"name":"97b3d176-e5ed-471d-a618-ea440a40d50e","values":[{"x":-1.9999999999999996,"y":-95.08187291561433},{"x":-1.301029995663981,"y":-82.36557163315268},{"x":-0.9999999999999998,"y":-77.01603392489588},{"x":-0.30102999566398114,"y":-65.5952407798716},{"x":0,"y":-61.66605514025747},{"x":0.6989700043360187,"y":-58.16479518403077},{"x":1,"y":-60.61721414857623},{"x":1.6989700043360185,"y":-78.40171812931032},{"x":2,"y":-90.53538130591016}]}],"marks":[{"type":"symbol","from":{"data":"97b3d176-e5ed-471d-a618-ea440a40d50e"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"fill":{"value":"steelblue"},"fillOpacity":{"value":1}},"update":{"shape":"circle","size":{"value":70},"stroke":{"value":"transparent"}},"hover":{"size":{"value":210},"stroke":{"value":"white"}}}}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"97b3d176-e5ed-471d-a618-ea440a40d50e","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"97b3d176-e5ed-471d-a618-ea440a40d50e","field":"data.y"}}],"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"97b3d176-e5ed-471d-a618-ea440a40d50e\", :values ({:x -1.9999999999999996, :y -95.08187291561433} {:x -1.301029995663981, :y -82.36557163315268} {:x -0.9999999999999998, :y -77.01603392489588} {:x -0.30102999566398114, :y -65.5952407798716} {:x 0.0, :y -61.66605514025747} {:x 0.6989700043360187, :y -58.16479518403077} {:x 1.0, :y -60.61721414857623} {:x 1.6989700043360185, :y -78.40171812931032} {:x 2.0, :y -90.53538130591016})}], :marks [{:type \"symbol\", :from {:data \"97b3d176-e5ed-471d-a618-ea440a40d50e\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 1}}, :update {:shape \"circle\", :size {:value 70}, :stroke {:value \"transparent\"}}, :hover {:size {:value 210}, :stroke {:value \"white\"}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"97b3d176-e5ed-471d-a618-ea440a40d50e\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"97b3d176-e5ed-471d-a618-ea440a40d50e\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}"}],"value":"[[[#'crp-params/alphas,#'crp-params/find-evidence],#'crp-params/evidences],#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"97b3d176-e5ed-471d-a618-ea440a40d50e\", :values ({:x -1.9999999999999996, :y -95.08187291561433} {:x -1.301029995663981, :y -82.36557163315268} {:x -0.9999999999999998, :y -77.01603392489588} {:x -0.30102999566398114, :y -65.5952407798716} {:x 0.0, :y -61.66605514025747} {:x 0.6989700043360187, :y -58.16479518403077} {:x 1.0, :y -60.61721414857623} {:x 1.6989700043360185, :y -78.40171812931032} {:x 2.0, :y -90.53538130591016})}], :marks [{:type \"symbol\", :from {:data \"97b3d176-e5ed-471d-a618-ea440a40d50e\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 1}}, :update {:shape \"circle\", :size {:value 70}, :stroke {:value \"transparent\"}}, :hover {:size {:value 210}, :stroke {:value \"white\"}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"97b3d176-e5ed-471d-a618-ea440a40d50e\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"97b3d176-e5ed-471d-a618-ea440a40d50e\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}]"}
;; <=

;; **
;;; It appears like the optimal CRP has an `alpha` somewhere between, approximately, 0.1 and 20 (the above graph's x-axis has a log-scale, base 10). We'll infer the correct value of alpha, taking a uniform prior between 0 and 20, which our rough inspection suggests is reasonable:
;; **

;; @@
(def alpha-prior (uniform-continuous 0 20))

(defquery predict [samples]
  (declare :primitive CRP-new)
  (declare :primitive evidence)
  (let [alpha (sample alpha-prior)
        crp (loop [n 0
                   crp (CRP-new alpha)]
              (if (= n (count samples))
                crp
                (recur (+ n 1)
                       (absorb crp (nth samples n)))))]
    (observe (flip (exp (evidence crp))) true)
    {:sample (sample (produce crp)), :alpha alpha}))
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/alpha-prior</span>","value":"#'crp-params/alpha-prior"},{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/predict</span>","value":"#'crp-params/predict"}],"value":"[#'crp-params/alpha-prior,#'crp-params/predict]"}
;; <=

;; @@
(def S 25000)

(def results (take S (map :result (doquery :smc predict [samples] :number-of-particles S))))
(def projections (map :sample results))
(def alphas (map :alpha results))

(plot/compose
  (plot/histogram (repeatedly S #(sample* alpha-prior)) :normalize :probability :color "green" :plot-range [[0 20] [0 0.3]])
  (plot/histogram alphas :normalize :probability))

(plot/histogram projections :normalize :probability :bins 10 :plot-range [[0 10] [0 1]])

;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/S</span>","value":"#'crp-params/S"},{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/results</span>","value":"#'crp-params/results"}],"value":"[#'crp-params/S,#'crp-params/results]"},{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/projections</span>","value":"#'crp-params/projections"}],"value":"[[#'crp-params/S,#'crp-params/results],#'crp-params/projections]"},{"type":"html","content":"<span class='clj-var'>#&#x27;crp-params/alphas</span>","value":"#'crp-params/alphas"}],"value":"[[[#'crp-params/S,#'crp-params/results],#'crp-params/projections],#'crp-params/alphas]"},{"type":"vega","content":{"width":400,"height":247.2187957763672,"padding":{"top":10,"left":55,"bottom":40,"right":10},"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":[0,20]},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":[0,0.3]}],"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}],"data":[{"name":"cc74e312-8d10-420d-bd70-792ff41c2cc1","values":[{"x":0,"y":0},{"x":1.2500000000000002,"y":0.061},{"x":2.5000000000000004,"y":0.06116},{"x":3.750000000000001,"y":0.06308},{"x":5.000000000000001,"y":0.06224},{"x":6.250000000000001,"y":0.06396},{"x":7.500000000000001,"y":0.06372},{"x":8.750000000000002,"y":0.0616},{"x":10.000000000000002,"y":0.0606},{"x":11.250000000000002,"y":0.0628},{"x":12.500000000000002,"y":0.06152},{"x":13.750000000000002,"y":0.0634},{"x":15.000000000000002,"y":0.06232},{"x":16.250000000000004,"y":0.06336},{"x":17.500000000000004,"y":0.06244},{"x":18.750000000000004,"y":0.06436},{"x":20.000000000000004,"y":0.06244},{"x":21.250000000000004,"y":0}]},{"name":"d65a3c42-5bdb-4e98-bd79-f7707336f5f0","values":[{"x":0.6738071524204559,"y":0},{"x":1.8341884675150748,"y":0.02532},{"x":2.9945697826096938,"y":0.147},{"x":4.154951097704313,"y":0.24844},{"x":5.315332412798932,"y":0.22672},{"x":6.475713727893551,"y":0.15048},{"x":7.6360950429881695,"y":0.09736},{"x":8.796476358082788,"y":0.04996},{"x":9.956857673177407,"y":0.02668},{"x":11.117238988272025,"y":0.0134},{"x":12.277620303366643,"y":0.00748},{"x":13.43800161846126,"y":0.00316},{"x":14.598382933555879,"y":0.00176},{"x":15.758764248650497,"y":0.00136},{"x":16.919145563745115,"y":0.00048},{"x":18.079526878839733,"y":0.0002},{"x":19.23990819393435,"y":0.00016},{"x":20.40028950902897,"y":0.00004},{"x":21.560670824123587,"y":0}]}],"marks":[{"type":"line","from":{"data":"cc74e312-8d10-420d-bd70-792ff41c2cc1"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"green"},"fillOpacity":{"value":0.4},"stroke":{"value":"green"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}},{"type":"line","from":{"data":"d65a3c42-5bdb-4e98-bd79-f7707336f5f0"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"steelblue"},"fillOpacity":{"value":0.4},"stroke":{"value":"steelblue"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain [0 20]} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain [0 0.3]}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}], :data ({:name \"cc74e312-8d10-420d-bd70-792ff41c2cc1\", :values ({:x 0.0, :y 0} {:x 1.2500000000000002, :y 0.061} {:x 2.5000000000000004, :y 0.06116} {:x 3.750000000000001, :y 0.06308} {:x 5.000000000000001, :y 0.06224} {:x 6.250000000000001, :y 0.06396} {:x 7.500000000000001, :y 0.06372} {:x 8.750000000000002, :y 0.0616} {:x 10.000000000000002, :y 0.0606} {:x 11.250000000000002, :y 0.0628} {:x 12.500000000000002, :y 0.06152} {:x 13.750000000000002, :y 0.0634} {:x 15.000000000000002, :y 0.06232} {:x 16.250000000000004, :y 0.06336} {:x 17.500000000000004, :y 0.06244} {:x 18.750000000000004, :y 0.06436} {:x 20.000000000000004, :y 0.06244} {:x 21.250000000000004, :y 0})} {:name \"d65a3c42-5bdb-4e98-bd79-f7707336f5f0\", :values ({:x 0.6738071524204559, :y 0} {:x 1.8341884675150748, :y 0.02532} {:x 2.9945697826096938, :y 0.147} {:x 4.154951097704313, :y 0.24844} {:x 5.315332412798932, :y 0.22672} {:x 6.475713727893551, :y 0.15048} {:x 7.6360950429881695, :y 0.09736} {:x 8.796476358082788, :y 0.04996} {:x 9.956857673177407, :y 0.02668} {:x 11.117238988272025, :y 0.0134} {:x 12.277620303366643, :y 0.00748} {:x 13.43800161846126, :y 0.00316} {:x 14.598382933555879, :y 0.00176} {:x 15.758764248650497, :y 0.00136} {:x 16.919145563745115, :y 4.8E-4} {:x 18.079526878839733, :y 2.0E-4} {:x 19.23990819393435, :y 1.6E-4} {:x 20.40028950902897, :y 4.0E-5} {:x 21.560670824123587, :y 0})}), :marks ({:type \"line\", :from {:data \"cc74e312-8d10-420d-bd70-792ff41c2cc1\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"green\"}, :fillOpacity {:value 0.4}, :stroke {:value \"green\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}} {:type \"line\", :from {:data \"d65a3c42-5bdb-4e98-bd79-f7707336f5f0\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}})}}"}],"value":"[[[[#'crp-params/S,#'crp-params/results],#'crp-params/projections],#'crp-params/alphas],#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain [0 20]} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain [0 0.3]}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}], :data ({:name \"cc74e312-8d10-420d-bd70-792ff41c2cc1\", :values ({:x 0.0, :y 0} {:x 1.2500000000000002, :y 0.061} {:x 2.5000000000000004, :y 0.06116} {:x 3.750000000000001, :y 0.06308} {:x 5.000000000000001, :y 0.06224} {:x 6.250000000000001, :y 0.06396} {:x 7.500000000000001, :y 0.06372} {:x 8.750000000000002, :y 0.0616} {:x 10.000000000000002, :y 0.0606} {:x 11.250000000000002, :y 0.0628} {:x 12.500000000000002, :y 0.06152} {:x 13.750000000000002, :y 0.0634} {:x 15.000000000000002, :y 0.06232} {:x 16.250000000000004, :y 0.06336} {:x 17.500000000000004, :y 0.06244} {:x 18.750000000000004, :y 0.06436} {:x 20.000000000000004, :y 0.06244} {:x 21.250000000000004, :y 0})} {:name \"d65a3c42-5bdb-4e98-bd79-f7707336f5f0\", :values ({:x 0.6738071524204559, :y 0} {:x 1.8341884675150748, :y 0.02532} {:x 2.9945697826096938, :y 0.147} {:x 4.154951097704313, :y 0.24844} {:x 5.315332412798932, :y 0.22672} {:x 6.475713727893551, :y 0.15048} {:x 7.6360950429881695, :y 0.09736} {:x 8.796476358082788, :y 0.04996} {:x 9.956857673177407, :y 0.02668} {:x 11.117238988272025, :y 0.0134} {:x 12.277620303366643, :y 0.00748} {:x 13.43800161846126, :y 0.00316} {:x 14.598382933555879, :y 0.00176} {:x 15.758764248650497, :y 0.00136} {:x 16.919145563745115, :y 4.8E-4} {:x 18.079526878839733, :y 2.0E-4} {:x 19.23990819393435, :y 1.6E-4} {:x 20.40028950902897, :y 4.0E-5} {:x 21.560670824123587, :y 0})}), :marks ({:type \"line\", :from {:data \"cc74e312-8d10-420d-bd70-792ff41c2cc1\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"green\"}, :fillOpacity {:value 0.4}, :stroke {:value \"green\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}} {:type \"line\", :from {:data \"d65a3c42-5bdb-4e98-bd79-f7707336f5f0\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}})}}]"},{"type":"vega","content":{"width":400,"height":247.2187957763672,"padding":{"top":10,"left":55,"bottom":40,"right":10},"data":[{"name":"2f74ea7d-f2e7-4147-8d77-6813f021d5f3","values":[{"x":0,"y":0},{"x":1.0000000000000002,"y":0.18884},{"x":2.0000000000000004,"y":0.10688},{"x":3.000000000000001,"y":0.21728},{"x":4.000000000000001,"y":0.05524},{"x":5.000000000000001,"y":0.05356},{"x":6.000000000000001,"y":0.16404},{"x":7.000000000000001,"y":0.05452},{"x":8.000000000000002,"y":0.02744},{"x":9.000000000000002,"y":0.1322},{"x":10.000000000000002,"y":0},{"x":11.000000000000002,"y":0}]}],"marks":[{"type":"line","from":{"data":"2f74ea7d-f2e7-4147-8d77-6813f021d5f3"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"steelblue"},"fillOpacity":{"value":0.4},"stroke":{"value":"steelblue"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":[0,10]},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":[0,1]}],"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"2f74ea7d-f2e7-4147-8d77-6813f021d5f3\", :values ({:x 0.0, :y 0} {:x 1.0000000000000002, :y 0.18884} {:x 2.0000000000000004, :y 0.10688} {:x 3.000000000000001, :y 0.21728} {:x 4.000000000000001, :y 0.05524} {:x 5.000000000000001, :y 0.05356} {:x 6.000000000000001, :y 0.16404} {:x 7.000000000000001, :y 0.05452} {:x 8.000000000000002, :y 0.02744} {:x 9.000000000000002, :y 0.1322} {:x 10.000000000000002, :y 0.0} {:x 11.000000000000002, :y 0})}], :marks [{:type \"line\", :from {:data \"2f74ea7d-f2e7-4147-8d77-6813f021d5f3\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain [0 10]} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain [0 1]}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}"}],"value":"[[[[[#'crp-params/S,#'crp-params/results],#'crp-params/projections],#'crp-params/alphas],#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain [0 20]} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain [0 0.3]}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}], :data ({:name \"cc74e312-8d10-420d-bd70-792ff41c2cc1\", :values ({:x 0.0, :y 0} {:x 1.2500000000000002, :y 0.061} {:x 2.5000000000000004, :y 0.06116} {:x 3.750000000000001, :y 0.06308} {:x 5.000000000000001, :y 0.06224} {:x 6.250000000000001, :y 0.06396} {:x 7.500000000000001, :y 0.06372} {:x 8.750000000000002, :y 0.0616} {:x 10.000000000000002, :y 0.0606} {:x 11.250000000000002, :y 0.0628} {:x 12.500000000000002, :y 0.06152} {:x 13.750000000000002, :y 0.0634} {:x 15.000000000000002, :y 0.06232} {:x 16.250000000000004, :y 0.06336} {:x 17.500000000000004, :y 0.06244} {:x 18.750000000000004, :y 0.06436} {:x 20.000000000000004, :y 0.06244} {:x 21.250000000000004, :y 0})} {:name \"d65a3c42-5bdb-4e98-bd79-f7707336f5f0\", :values ({:x 0.6738071524204559, :y 0} {:x 1.8341884675150748, :y 0.02532} {:x 2.9945697826096938, :y 0.147} {:x 4.154951097704313, :y 0.24844} {:x 5.315332412798932, :y 0.22672} {:x 6.475713727893551, :y 0.15048} {:x 7.6360950429881695, :y 0.09736} {:x 8.796476358082788, :y 0.04996} {:x 9.956857673177407, :y 0.02668} {:x 11.117238988272025, :y 0.0134} {:x 12.277620303366643, :y 0.00748} {:x 13.43800161846126, :y 0.00316} {:x 14.598382933555879, :y 0.00176} {:x 15.758764248650497, :y 0.00136} {:x 16.919145563745115, :y 4.8E-4} {:x 18.079526878839733, :y 2.0E-4} {:x 19.23990819393435, :y 1.6E-4} {:x 20.40028950902897, :y 4.0E-5} {:x 21.560670824123587, :y 0})}), :marks ({:type \"line\", :from {:data \"cc74e312-8d10-420d-bd70-792ff41c2cc1\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"green\"}, :fillOpacity {:value 0.4}, :stroke {:value \"green\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}} {:type \"line\", :from {:data \"d65a3c42-5bdb-4e98-bd79-f7707336f5f0\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}})}}],#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"2f74ea7d-f2e7-4147-8d77-6813f021d5f3\", :values ({:x 0.0, :y 0} {:x 1.0000000000000002, :y 0.18884} {:x 2.0000000000000004, :y 0.10688} {:x 3.000000000000001, :y 0.21728} {:x 4.000000000000001, :y 0.05524} {:x 5.000000000000001, :y 0.05356} {:x 6.000000000000001, :y 0.16404} {:x 7.000000000000001, :y 0.05452} {:x 8.000000000000002, :y 0.02744} {:x 9.000000000000002, :y 0.1322} {:x 10.000000000000002, :y 0.0} {:x 11.000000000000002, :y 0})}], :marks [{:type \"line\", :from {:data \"2f74ea7d-f2e7-4147-8d77-6813f021d5f3\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain [0 10]} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain [0 1]}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}]"}
;; <=

;; **
;;; Above, the first graph is a comparison of our prior on the parameter `alpha` and our posterior on the parameter `alpha`, and the second graph is the resulting posterior predictive distribution over the next output of the CRP.
;;; 
;;; In these results, we see that the correct value of alpha appears to be roughly 5. However, the posterior is a skewed distribution that doesn't completely rule out higher values of alpha, such as 14 or 15. Low values of alpha, however, are very much ruled out.
;;; 
;;; As we've concluded the value of alpha is most likely moderate relative to the counts in our dataset, our posterior predictive assigns only moderate probability to the customer sitting at a new table.
;; **
